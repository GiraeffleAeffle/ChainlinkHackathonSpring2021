{"metadata":"{\"compiler\":{\"version\":\"0.7.6\"},\"sources\":{\"contracts/YourContract.sol\":{\"content\":\"pragma solidity >=0.6 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@chainlink/contracts/src/v0.6/ChainlinkClient.sol\\\";\\nimport \\\"@aave/protocol-v2/contracts/misc/interfaces/IWETHGateway.sol\\\";\\nimport \\\"@aave/protocol-v2/contracts/interfaces/IAToken.sol\\\";\\n//import \\\"hardhat/console.sol\\\";\\n\\n//, IAToken\\ncontract YourContract is ChainlinkClient {\\n    \\n    address private oracle;\\n    bytes32 private jobId;\\n    uint256 private fee;\\n  \\n    address payable[] public stakerReg;\\n    uint256[] public oracleData;\\n    uint256[] public relativeGHG;\\n    uint256 public averageRelGHGV;\\n    address[] public requesters;\\n    address[] public penalized;\\n    address[] public rewarded;\\n    uint256 public lastAWETHBalance = 0;\\n\\n    mapping(address => uint256) balances;\\n    mapping(address => uint256[] ) dataToAddress;\\n    mapping(address => bool) stakers;\\n    \\n    //EVENTS\\n\\n    event RequesterToData(address indexed _requester, uint256 indexed _oracleData);\\n    event SetData(address indexed _requester, uint256 indexed _data);\\n    event GetRelChange(uint256 _relChange);\\n    event PayoutTo(address _winner, uint _amount);\\n     \\n      // --- KOVAN --\\n    IWETHGateway gateway = IWETHGateway(0xf8aC10E65F2073460aAD5f28E1EABE807DC287CF);\\n    IAToken aWETH = IAToken(0x87b1f4cf9BD63f7BBD3eE1aD04E8F52540349347);\\n    IAToken WETH = IAToken(0xd0A1E359811322d97991E03f863a0C30C2cF029C);\\n    \\n    constructor() public {\\n    setPublicChainlinkToken();\\n    oracle = 0xAA1DC356dc4B18f30C347798FD5379F3D77ABC5b;\\n    jobId = \\\"c7dd72ca14b44f0c9b6cfcd4b7ec0a2c\\\";\\n    fee = 0.1 * 10 ** 18; // 0.1 LINK\\n  }\\n\\n     /**\\n     * Create a Chainlink request to retrieve API response, find the target\\n     * data, then multiply by 1000000000000000000 (to remove decimal places from data).\\n     */\\n    function requestVolumeData(string memory _API) public returns (bytes32 requestId) \\n    {\\n        require(stakers[msg.sender], \\\"Not a staker\\\");\\n        requesters.push(msg.sender);\\n        Chainlink.Request memory request = buildChainlinkRequest(jobId, address(this), this.fulfill.selector);\\n        \\n        // Set the URL to perform the GET request on\\n        request.add(\\\"get\\\", _API);\\n        \\n        // Set the path to find the desired data in the API response, where the response format is:\\n        request.add(\\\"path\\\", \\\"list.0.components.co\\\");\\n        \\n        // Multiply the result by 1000000000000000000 to remove decimals\\n        int timesAmount = 10**18;\\n        request.addInt(\\\"times\\\", timesAmount);\\n        \\n        // Sends the request\\n        return sendChainlinkRequestTo(oracle, request, fee);\\n    }\\n    \\n    /**\\n     * Receive the response in the form of uint256\\n     */ \\n    function fulfill(bytes32 _requestId, uint256 _data) public recordChainlinkFulfillment(_requestId)\\n    {\\n      oracleData.push(_data);\\n      relativeGHG.push(0);\\n    }\\n    \\n    /**\\n    * Map oracleData to requesters\\n     */\\n    function requesterToData() public {\\n        require(requesters.length == oracleData.length);\\n        for (uint256 ii = 0; ii < requesters.length; ii++) {\\n            dataToAddress[requesters[ii]].push(oracleData[ii]);\\n            emit RequesterToData(requesters[ii], oracleData[ii]);\\n        }\\n        delete requesters;\\n        delete oracleData;\\n    }\\n    \\n    /**\\n     * Withdraw LINK from this contract\\n     * \\n     * NOTE: DO NOT USE THIS IN PRODUCTION AS IT CAN BE CALLED BY ANY ADDRESS.\\n     * THIS IS PURELY FOR EXAMPLE PURPOSES ONLY.\\n     */\\n    function withdrawLink() external {\\n        LinkTokenInterface linkToken = LinkTokenInterface(chainlinkTokenAddress());\\n        require(linkToken.transfer(msg.sender, linkToken.balanceOf(address(this))), \\\"Unable to transfer\\\");\\n    }\\n\\n    /**\\n    * Set \\\"oracle\\\" data. \\n    * Just for testing purpose without the need to use an oracle.\\n     */\\n    function setData(uint256 _data) public {\\n      dataToAddress[msg.sender].push(_data);\\n      SetData(msg.sender, _data);\\n    }\\n\\n    \\n    /*\\n    * TESTING FUNCTION\\n    */\\n    function prepareData() public {\\n        stakerReg.push(0xD8631E88f5A330FAF7424Def118A389E8405895c);\\n        stakerReg.push(0x497f35b5a2859343CdAA98aeDb7605B2c46136d7);\\n        dataToAddress[0xD8631E88f5A330FAF7424Def118A389E8405895c].push(100);\\n        dataToAddress[0xD8631E88f5A330FAF7424Def118A389E8405895c].push(50);\\n        dataToAddress[0x497f35b5a2859343CdAA98aeDb7605B2c46136d7].push(100);\\n        dataToAddress[0x497f35b5a2859343CdAA98aeDb7605B2c46136d7].push(80);\\n    }\\n\\n    /**\\n    * Get data. Only with caller address.\\n     */\\n    function getData() public view returns (uint256[] memory) {\\n        return dataToAddress[msg.sender];\\n    }\\n    \\n    /**\\n    * Stake ETH\\n     */\\n    function stake() \\n    public\\n    payable {\\n      require(msg.value > 0, \\\"Staking amount must be higher than 0\\\");\\n      stakers[msg.sender] = true;\\n      stakerReg.push(msg.sender);\\n      lastAWETHBalance = aWETH.balanceOf(address(this)); //before deposit\\n      gateway.depositETH{value: msg.value}(address(this), 0); //Exchanges ETH for aWETH\\n      //balances[msg.sender] += aWETH.balanceOf(msg.sender);\\n      balances[msg.sender] += aWETH.balanceOf(address(this)) - lastAWETHBalance;\\n    }\\n    \\n    \\n    /*\\n    * returns the balance of aWETH in the account.\\n    */\\n    function aWethBalance() public view returns(uint256) {\\n        return aWETH.balanceOf(address(this));\\n    }\\n    \\n /*\\n    * Get the relative Change of the GHG values.\\n    * TODO: Set one starting value and take the average of the following. Eventually needs to be signed integer\\n    */\\n    function getRelChange() public {\\n        for (uint256 ii= 0;ii<stakerReg.length;ii++) {\\n            for (uint256 jj=0; jj<dataToAddress[stakerReg[ii]].length;jj++) {\\n                if (jj == 0) {\\n                    relativeGHG[ii] = dataToAddress[stakerReg[ii]][jj]; // expecting that second value is lower than first\\n                    emit GetRelChange(relativeGHG[ii]);\\n                } else {\\n                    relativeGHG[ii] -= dataToAddress[stakerReg[ii]][jj]; // expecting that second value is lower than first\\n                    emit GetRelChange(relativeGHG[ii]);    \\n                }\\n            }\\n        }\\n    }\\n\\n    function averageRelGHG() internal {\\n        for(uint16 ii=0; ii<relativeGHG.length; ii++) {\\n            averageRelGHGV += relativeGHG[ii];\\n        }\\n        averageRelGHGV /= relativeGHG.length;\\n    }\\n\\n    /*\\n    * If your relative GHG reduction is over the average value you get a reward\\n    * paid by the ones under the average. \\n    * TODO: Events\\n    */\\n    function payOrGetPaid() public {\\n        averageRelGHG();\\n        for(uint256 jj=0; jj<relativeGHG.length;jj++) {\\n            if(relativeGHG[jj] > averageRelGHGV) {\\n                rewarded.push(stakerReg[jj]);\\n            }  else {\\n                penalized.push(stakerReg[jj]);\\n                balances[address(this)] += balances[penalized[jj]];\\n                balances[penalized[jj]] = 0;\\n            }\\n        }\\n        for(uint256 ii=0; ii<rewarded.length;ii++) {\\n            balances[rewarded[ii]] += balances[address(this)]/rewarded.length;\\n            aWETH.approve(0xf8aC10E65F2073460aAD5f28E1EABE807DC287CF, type(uint).max); // infinite approval / not sure if this works\\n            WETH.approve(0xf8aC10E65F2073460aAD5f28E1EABE807DC287CF, type(uint).max); \\n            gateway.withdrawETH(balances[rewarded[ii]], rewarded[ii]);\\n            emit PayoutTo(rewarded[ii], balances[rewarded[ii]]);\\n        }\\n        balances[address(this)] = 0;\\n    }\\n    \\n    /**\\n    * Compare GHG values and send them to the winner address\\n    * TODO: Collect penalties from the others to pay the winner\\n    * TODO: Events\\n    \\n    function compareGHG() public{\\n      uint256 maxValue = 0;\\n      uint256 position = 0;\\n      for(uint256 jj=0; jj<relativeGHG.length-1;jj++) {\\n          if(relativeGHG[jj] > relativeGHG[jj+1]) {\\n              if (relativeGHG[jj] > maxValue) {\\n                  maxValue = relativeGHG[jj];\\n                  position = jj;\\n              }\\n          } else {\\n              if (relativeGHG[jj+1] > maxValue) {\\n                  maxValue = relativeGHG[jj+1];\\n                  position = jj+1;\\n              }\\n          }\\n      }\\n      stakerReg[position].transfer(balances[stakingpool]);\\n    }\\n    */\\n}\"},\"@chainlink/contracts/src/v0.6/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for writing to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary BufferChainlink {\\n  /**\\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n  *      a capacity. The capacity may be longer than the current value, in\\n  *      which case it can be extended without the need to allocate more memory.\\n  */\\n  struct buffer {\\n    bytes buf;\\n    uint capacity;\\n  }\\n\\n  /**\\n  * @dev Initializes a buffer with an initial capacity.\\n  * @param buf The buffer to initialize.\\n  * @param capacity The number of bytes of space to allocate the buffer.\\n  * @return The buffer, for chaining.\\n  */\\n  function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Initializes a new buffer from an existing bytes object.\\n  *      Changes to the buffer may mutate the original value.\\n  * @param b The bytes object to initialize the buffer with.\\n  * @return A new buffer.\\n  */\\n  function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint a, uint b) private pure returns(uint) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n  * @dev Sets buffer length to 0.\\n  * @param buf The buffer to truncate.\\n  * @return The original buffer, for chaining..\\n  */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The start offset to write to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(buffer memory buf, uint off, bytes memory data, uint len) internal pure returns(buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint dest;\\n    uint src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint mask = 256 ** (32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(buffer memory buf, bytes memory data, uint len) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write the byte at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeUint8(buffer memory buf, uint off, uint8 data) internal pure returns(buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n  *      exceed the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (left-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(buffer memory buf, uint off, bytes32 data, uint len) private pure returns(buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeBytes20(buffer memory buf, uint off, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chhaining.\\n  */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (right-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeInt(buffer memory buf, uint off, uint data, uint len) private pure returns(buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n    * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n    * exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer.\\n    */\\n  function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\"},\"@chainlink/contracts/src/v0.6/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.19 < 0.7.0;\\n\\nimport { BufferChainlink } from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n    using BufferChainlink for BufferChainlink.buffer;\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    function encodeType(BufferChainlink.buffer memory buf, uint8 major, uint value) private pure {\\n        if(value <= 23) {\\n            buf.appendUint8(uint8((major << 5) | value));\\n        } else if(value <= 0xFF) {\\n            buf.appendUint8(uint8((major << 5) | 24));\\n            buf.appendInt(value, 1);\\n        } else if(value <= 0xFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 25));\\n            buf.appendInt(value, 2);\\n        } else if(value <= 0xFFFFFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 26));\\n            buf.appendInt(value, 4);\\n        } else if(value <= 0xFFFFFFFFFFFFFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 27));\\n            buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n        buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n        encodeType(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n        if(value < -0x10000000000000000) {\\n            encodeSignedBigNum(buf, value);\\n        } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, value);\\n        } else if(value >= 0) {\\n            encodeType(buf, MAJOR_TYPE_INT, uint(value));\\n        } else {\\n            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\\n        }\\n    }\\n\\n    function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n        encodeType(buf, MAJOR_TYPE_BYTES, value.length);\\n        buf.append(value);\\n    }\\n\\n    function encodeBigNum(BufferChainlink.buffer memory buf, int value) internal pure {\\n      buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n      encodeBytes(buf, abi.encode(uint(value)));\\n    }\\n\\n    function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n      buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n      encodeBytes(buf, abi.encode(uint(-1 - input)));\\n    }\\n\\n    function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\\n        buf.append(bytes(value));\\n    }\\n\\n    function startArray(BufferChainlink.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n    }\\n\\n    function startMap(BufferChainlink.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n    }\\n\\n    function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n    }\\n}\\n\"},\"@chainlink/contracts/src/v0.6/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { CBORChainlink } from \\\"./vendor/CBORChainlink.sol\\\";\\nimport { BufferChainlink } from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param _id The Job Specification ID\\n   * @param _callbackAddress The callback address\\n   * @param _callbackFunction The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 _id,\\n    address _callbackAddress,\\n    bytes4 _callbackFunction\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = _id;\\n    self.callbackAddress = _callbackAddress;\\n    self.callbackFunctionId = _callbackFunction;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param _data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory _data)\\n    internal pure\\n  {\\n    BufferChainlink.init(self.buf, _data.length);\\n    BufferChainlink.append(self.buf, _data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The string value to add\\n   */\\n  function add(Request memory self, string memory _key, string memory _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeString(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The bytes value to add\\n   */\\n  function addBytes(Request memory self, string memory _key, bytes memory _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeBytes(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The int256 value to add\\n   */\\n  function addInt(Request memory self, string memory _key, int256 _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeInt(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The uint256 value to add\\n   */\\n  function addUint(Request memory self, string memory _key, uint256 _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeUInt(_value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _values The array of string values to add\\n   */\\n  function addStringArray(Request memory self, string memory _key, string[] memory _values)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < _values.length; i++) {\\n      self.buf.encodeString(_values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\"},\"@chainlink/contracts/src/v0.6/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface ENSInterface {\\n\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n\\n  function setSubnodeOwner(bytes32 node, bytes32 label, address _owner) external;\\n  function setResolver(bytes32 node, address _resolver) external;\\n  function setOwner(bytes32 node, address _owner) external;\\n  function setTTL(bytes32 node, uint64 _ttl) external;\\n  function owner(bytes32 node) external view returns (address);\\n  function resolver(bytes32 node) external view returns (address);\\n  function ttl(bytes32 node) external view returns (uint64);\\n\\n}\\n\"},\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\"},\"@chainlink/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\"},\"@chainlink/contracts/src/v0.6/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\"},\"@chainlink/contracts/src/v0.6/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\"},\"@chainlink/contracts/src/v0.6/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport { ENSResolver as ENSResolver_Chainlink } from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\ncontract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 constant internal LINK = 10**18;\\n  uint256 constant private AMOUNT_OVERRIDE = 0;\\n  address constant private SENDER_OVERRIDE = address(0);\\n  uint256 constant private ARGS_VERSION = 1;\\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private ens;\\n  bytes32 private ensNode;\\n  LinkTokenInterface private link;\\n  ChainlinkRequestInterface private oracle;\\n  uint256 private requestCount = 1;\\n  mapping(bytes32 => address) private pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param _specId The Job Specification ID that the request will be created for\\n   * @param _callbackAddress The callback address that the response will be sent to\\n   * @param _callbackFunctionSignature The callback function signature to use for the callback address\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 _specId,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(_specId, _callbackAddress, _callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param _req The initialized Chainlink Request\\n   * @param _payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory _req, uint256 _payment)\\n    internal\\n    returns (bytes32)\\n  {\\n    return sendChainlinkRequestTo(address(oracle), _req, _payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param _oracle The address of the oracle for the request\\n   * @param _req The initialized Chainlink Request\\n   * @param _payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(address _oracle, Chainlink.Request memory _req, uint256 _payment)\\n    internal\\n    returns (bytes32 requestId)\\n  {\\n    requestId = keccak256(abi.encodePacked(this, requestCount));\\n    _req.nonce = requestCount;\\n    pendingRequests[requestId] = _oracle;\\n    emit ChainlinkRequested(requestId);\\n    require(link.transferAndCall(_oracle, _payment, encodeRequest(_req)), \\\"unable to transferAndCall to oracle\\\");\\n    requestCount += 1;\\n\\n    return requestId;\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param _requestId The request ID\\n   * @param _payment The amount of LINK sent for the request\\n   * @param _callbackFunc The callback function specified for the request\\n   * @param _expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    bytes4 _callbackFunc,\\n    uint256 _expiration\\n  )\\n    internal\\n  {\\n    ChainlinkRequestInterface requested = ChainlinkRequestInterface(pendingRequests[_requestId]);\\n    delete pendingRequests[_requestId];\\n    emit ChainlinkCancelled(_requestId);\\n    requested.cancelOracleRequest(_requestId, _payment, _callbackFunc, _expiration);\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param _oracle The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address _oracle) internal {\\n    oracle = ChainlinkRequestInterface(_oracle);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param _link The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address _link) internal {\\n    link = LinkTokenInterface(_link);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param _oracle The address of the oracle contract that will fulfill the request\\n   * @param _requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address _oracle, bytes32 _requestId)\\n    internal\\n    notPendingRequest(_requestId)\\n  {\\n    pendingRequests[_requestId] = _oracle;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param _ens The address of the ENS contract\\n   * @param _node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address _ens, bytes32 _node)\\n    internal\\n  {\\n    ens = ENSInterface(_ens);\\n    ensNode = _node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS()\\n    internal\\n  {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Encodes the request to be sent to the oracle contract\\n   * @dev The Chainlink node expects values to be in order for the request to be picked up. Order of types\\n   * will be validated in the oracle contract.\\n   * @param _req The initialized Chainlink Request\\n   * @return The bytes payload for the `transferAndCall` method\\n   */\\n  function encodeRequest(Chainlink.Request memory _req)\\n    private\\n    view\\n    returns (bytes memory)\\n  {\\n    return abi.encodeWithSelector(\\n      oracle.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      _req.id,\\n      _req.callbackAddress,\\n      _req.callbackFunctionId,\\n      _req.nonce,\\n      ARGS_VERSION,\\n      _req.buf.buf);\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 _requestId)\\n    internal\\n    recordChainlinkFulfillment(_requestId)\\n    // solhint-disable-next-line no-empty-blocks\\n  {}\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 _requestId) {\\n    require(msg.sender == pendingRequests[_requestId],\\n            \\\"Source must be the oracle of the request\\\");\\n    delete pendingRequests[_requestId];\\n    emit ChainlinkFulfilled(_requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 _requestId) {\\n    require(pendingRequests[_requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\"},\"@aave/protocol-v2/contracts/misc/interfaces/IWETHGateway.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\ninterface IWETHGateway {\\n  function depositETH(address onBehalfOf, uint16 referralCode) external payable;\\n\\n  function withdrawETH(uint256 amount, address onBehalfOf) external;\\n\\n  function repayETH(\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external payable;\\n\\n  function borrowETH(\\n    uint256 amount,\\n    uint256 interesRateMode,\\n    uint16 referralCode\\n  ) external;\\n}\\n\"},\"@aave/protocol-v2/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"@aave/protocol-v2/contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n}\\n\"},\"@aave/protocol-v2/contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\n\\ninterface IAToken is IERC20, IScaledBalanceToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param value The amount being\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed from, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints `amount` aTokens to `user`\\n   * @param user The address receiving the minted tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address user,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted after aTokens are burned\\n   * @param from The owner of the aTokens, getting them burned\\n   * @param target The address that will receive the underlying\\n   * @param value The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @param user The owner of the aTokens, getting them burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address user,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n   * assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the aTokens\\n   * @param amount The amount getting transferred\\n   * @return The amount transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n}\\n\"}}}","address":"0x63646828f8F122c66266C069bBcD58332188d584","bytecode":"0x608060405260016004556000601055601480546001600160a01b031990811673f8ac10e65f2073460aad5f28e1eabe807dc287cf179091556015805482167387b1f4cf9bd63f7bbd3ee1ad04e8f525403493471790556016805490911673d0a1e359811322d97991e03f863a0c30c2cf029c1790553480156200008157600080fd5b506200008c620000e8565b600680546001600160a01b03191673aa1dc356dc4b18f30c347798fd5379f3d77abc5b1790557f633764643732636131346234346630633962366366636434623765633061326360075567016345785d8a000060085562000192565b6200016e73c89bd4e1632d3a43cb03aaad5262cbe4038bc5716001600160a01b03166338cc48316040518163ffffffff1660e01b815260040160206040518083038186803b1580156200013a57600080fd5b505afa1580156200014f573d6000803e3d6000fd5b505050506040513d60208110156200016657600080fd5b505162000170565b565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b611dbb80620001a26000396000f3fe6080604052600436106101145760003560e01c80635f956d1a116100a0578063aa4dea0011610064578063aa4dea00146103d4578063bb4772e5146103fe578063c7bef65d14610413578063ed6c29aa14610428578063f4d638df1461043d57610114565b80635f956d1a146102b857806361598c711461036b5780638dc654a2146103955780638fc813c5146103aa578063944d7b55146103bf57610114565b80634357855e116100e75780634357855e146101f55780634819c6321461022557806352f1e5891461024f5780635b4b73a9146102645780635e1a6c171461028e57610114565b8063196a4b84146101195780633094cb741461015f5780633a4b66f1146101865780633bc5de3014610190575b600080fd5b34801561012557600080fd5b506101436004803603602081101561013c57600080fd5b5035610467565b604080516001600160a01b039092168252519081900360200190f35b34801561016b57600080fd5b5061017461048e565b60408051918252519081900360200190f35b61018e610494565b005b34801561019c57600080fd5b506101a56106ac565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101e15781810151838201526020016101c9565b505050509050019250505060405180910390f35b34801561020157600080fd5b5061018e6004803603604081101561021857600080fd5b508035906020013561070d565b34801561023157600080fd5b506101746004803603602081101561024857600080fd5b5035610810565b34801561025b57600080fd5b5061018e61082e565b34801561027057600080fd5b5061018e6004803603602081101561028757600080fd5b5035610933565b34801561029a57600080fd5b50610143600480360360208110156102b157600080fd5b5035610983565b3480156102c457600080fd5b50610174600480360360208110156102db57600080fd5b8101906020810181356401000000008111156102f657600080fd5b82018360208201111561030857600080fd5b8035906020019184600183028401116401000000008311171561032a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610990945050505050565b34801561037757600080fd5b506101436004803603602081101561038e57600080fd5b5035610b1d565b3480156103a157600080fd5b5061018e610b2a565b3480156103b657600080fd5b5061018e610c83565b3480156103cb57600080fd5b506101746110f0565b3480156103e057600080fd5b50610174600480360360208110156103f757600080fd5b50356110f6565b34801561040a57600080fd5b5061018e611103565b34801561041f57600080fd5b5061018e6112df565b34801561043457600080fd5b50610174611428565b34801561044957600080fd5b506101436004803603602081101561046057600080fd5b50356114a4565b600f818154811061047457fe5b6000918252602090912001546001600160a01b0316905081565b60105481565b600034116104d35760405162461bcd60e51b8152600401808060200182810382526024815260200180611d176024913960400191505060405180910390fd5b336000818152601360209081526040808320805460ff191660019081179091556009805491820181559093527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90920180546001600160a01b03191690931790925560155481516370a0823160e01b815230600482015291516001600160a01b0391909116926370a082319260248082019391829003018186803b15801561057a57600080fd5b505afa15801561058e573d6000803e3d6000fd5b505050506040513d60208110156105a457600080fd5b5051601055601454604080516358c22be760e01b815230600482015260006024820181905291516001600160a01b03909316926358c22be79234926044808201939182900301818588803b1580156105fb57600080fd5b505af115801561060f573d6000803e3d6000fd5b5050601054601554604080516370a0823160e01b815230600482015290519295506001600160a01b0390911693506370a082319250602480820192602092909190829003018186803b15801561066457600080fd5b505afa158015610678573d6000803e3d6000fd5b505050506040513d602081101561068e57600080fd5b50513360009081526011602052604090208054929091039091019055565b3360009081526012602090815260409182902080548351818402810184019094528084526060939283018282801561070357602002820191906000526020600020905b8154815260200190600101908083116106ef575b5050505050905090565b60008281526005602052604090205482906001600160a01b031633146107645760405162461bcd60e51b8152600401808060200182810382526028815260200180611d5e6028913960400191505060405180910390fd5b60008181526005602052604080822080546001600160a01b03191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a250600a805460018181019092557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80191909155600b8054918201815560009081527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db99091015550565b600b818154811061081d57fe5b600091825260209091200154905081565b600a54600d541461083e57600080fd5b60005b600d548110156109185760126000600d838154811061085c57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020600a80548390811061088e57fe5b60009182526020808320909101548354600181018555938352912090910155600a8054829081106108bb57fe5b9060005260206000200154600d82815481106108d357fe5b60009182526020822001546040516001600160a01b03909116917fcef9fc88e225fa1bbbecae68d6213c09e5033a0eeafe4afccd9709a9435c98fb91a3600101610841565b50610925600d6000611c90565b610931600a6000611c90565b565b3360008181526012602090815260408083208054600181018255908452918320909101849055518392917f10d7325afad389b2d1513a84eb27416d3f7cae3ddac7bc0cd24d7f4f1a00685191a350565b600d818154811061047457fe5b3360009081526013602052604081205460ff166109e3576040805162461bcd60e51b815260206004820152600c60248201526b2737ba10309039ba30b5b2b960a11b604482015290519081900360640190fd5b600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b03191633179055610a2d611cae565b600754610a4290306321abc2af60e11b6114b1565b60408051808201909152600381526219d95d60ea1b6020820152909150610a6b908290856114d6565b610ac8604051806040016040528060048152602001630e0c2e8d60e31b815250604051806040016040528060148152602001736c6973742e302e636f6d706f6e656e74732e636f60601b815250836114d69092919063ffffffff16565b60408051808201909152600581526474696d657360d81b6020820152670de0b6b3a764000090610afa908390836114f9565b600654600854610b15916001600160a01b0316908490611517565b949350505050565b6009818154811061047457fe5b6000610b346116e5565b9050806001600160a01b031663a9059cbb33836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b9357600080fd5b505afa158015610ba7573d6000803e3d6000fd5b505050506040513d6020811015610bbd57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b158015610c0e57600080fd5b505af1158015610c22573d6000803e3d6000fd5b505050506040513d6020811015610c3857600080fd5b5051610c80576040805162461bcd60e51b81526020600482015260126024820152712ab730b13632903a37903a3930b739b332b960711b604482015290519081900360640190fd5b50565b610c8b6116f4565b60005b600b54811015610de557600c54600b8281548110610ca857fe5b90600052602060002001541115610d0857600f60098281548110610cc857fe5b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b03909216919091179055610ddd565b600e60098281548110610d1757fe5b6000918252602080832090910154835460018101855593835290822090920180546001600160a01b0319166001600160a01b0390931692909217909155600e8054601192919084908110610d6757fe5b60009182526020808320909101546001600160a01b031683528281019390935260409182018120543082526011938490529181208054909201909155600e805491929183919085908110610db757fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020555b600101610c8e565b5060005b600f548110156110dd57600f543060009081526011602052604090205481610e0d57fe5b0460116000600f8481548110610e1f57fe5b60009182526020808320909101546001600160a01b03908116845283820194909452604092830182208054909501909455601554825163095ea7b360e01b815273f8ac10e65f2073460aad5f28e1eabe807dc287cf60048201526000196024820152925193169363095ea7b393604480850194929391928390030190829087803b158015610eac57600080fd5b505af1158015610ec0573d6000803e3d6000fd5b505050506040513d6020811015610ed657600080fd5b50506016546040805163095ea7b360e01b815273f8ac10e65f2073460aad5f28e1eabe807dc287cf6004820152600019602482015290516001600160a01b039092169163095ea7b3916044808201926020929091908290030181600087803b158015610f4157600080fd5b505af1158015610f55573d6000803e3d6000fd5b505050506040513d6020811015610f6b57600080fd5b5050601454600f80546001600160a01b03909216916336118b52916011916000919086908110610f9757fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902054600f805485908110610fca57fe5b6000918252602082200154604080516001600160e01b031960e087901b16815260048101949094526001600160a01b0390911660248401525160448084019382900301818387803b15801561101e57600080fd5b505af1158015611032573d6000803e3d6000fd5b505050507f695d9f48d38404ab4e67bdc812c4a80cba93ef87f7c4dd887537c418c5bf9a4a600f828154811061106457fe5b9060005260206000200160009054906101000a90046001600160a01b031660116000600f858154811061109357fe5b60009182526020808320909101546001600160a01b0390811684528382019490945260409283019091205482519490931684528301919091528051918290030190a1600101610de9565b5030600090815260116020526040812055565b600c5481565b600a818154811061081d57fe5b60005b600954811015610c805760005b601260006009848154811061112457fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020548110156112d6578061120f57601260006009848154811061116657fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902080548290811061119657fe5b9060005260206000200154600b83815481106111ae57fe5b90600052602060002001819055507fe87559bd68d91949aba8540903f38296d82d38ac0d9d687104cecd37448c8aaf600b83815481106111ea57fe5b90600052602060002001546040518082815260200191505060405180910390a16112ce565b601260006009848154811061122057fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902080548290811061125057fe5b9060005260206000200154600b838154811061126857fe5b90600052602060002001600082825403925050819055507fe87559bd68d91949aba8540903f38296d82d38ac0d9d687104cecd37448c8aaf600b83815481106112ad57fe5b90600052602060002001546040518082815260200191505060405180910390a15b600101611113565b50600101611106565b60098054600181810183557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af91820180546001600160a01b031990811673d8631e88f5a330faf7424def118a389e8405895c17909155835480830190945592909101805490921673497f35b5a2859343cdaa98aedb7605b2c46136d71790915560126020527fa63d50593a9f2d28784201546df2269b484f93965be799d7b91efe8b374b63aa8054808301825560647f6255b8012d5313325fa81cd2a413068816ad5d10d683a020e60dcfca85d972d79182018190558254808501909355603292909101919091557ffe8d6ea8e6ae634106c2dfe6253476c728fd6c8430fb19502e28853f0bda05bf805480840182557f4936ef248d4ca473a122a820ab669efcd6901bad2fd4a840dc188f3673ee29f890810192909255805492830181556000526050910155565b601554604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561147357600080fd5b505afa158015611487573d6000803e3d6000fd5b505050506040513d602081101561149d57600080fd5b5051905090565b600e818154811061047457fe5b6114b9611cae565b6114c1611cae565b6114cd8186868661174f565b95945050505050565b60808301516114e5908361178c565b60808301516114f4908261178c565b505050565b6080830151611508908361178c565b60808301516114f490826117a3565b6004546040805130606090811b60208084019190915260348084018690528451808503909101815260549093018452825192810192909220908601939093526000838152600590915281812080546001600160a01b0319166001600160a01b038816179055905182917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af991a26002546001600160a01b0316634000aea085846115bf87611802565b6040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611620578181015183820152602001611608565b50505050905090810190601f16801561164d5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561166e57600080fd5b505af1158015611682573d6000803e3d6000fd5b505050506040513d602081101561169857600080fd5b50516116d55760405162461bcd60e51b8152600401808060200182810382526023815260200180611d3b6023913960400191505060405180910390fd5b6004805460010190559392505050565b6002546001600160a01b031690565b60005b600b5461ffff8216101561173357600b8161ffff168154811061171657fe5b600091825260209091200154600c805490910190556001016116f7565b50600b54600c805460009083908161174757fe5b049091555050565b611757611cae565b6117678560800151610100611926565b50509183526001600160a01b031660208301526001600160e01b031916604082015290565b6117998260038351611966565b6114f48282611a40565b67ffffffffffffffff198112156117c3576117be8282611a61565b6117fe565b67ffffffffffffffff8113156117dd576117be8282611a9a565b600081126117f1576117be82600083611966565b6117fe8260018319611966565b5050565b6060634042994660e01b6000808460000151856020015186604001518760600151600189608001516000015160405160240180896001600160a01b03168152602001888152602001878152602001866001600160a01b03168152602001856001600160e01b031916815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156118b457818101518382015260200161189c565b50505050905090810190601f1680156118e15780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909d169c909c17909b5250989950505050505050505050919050565b61192e611ce3565b60208206156119435760208206602003820191505b506020808301829052604080518085526000815283019091019052815b92915050565b60178111611987576119818360e0600585901b168317611acf565b506114f4565b60ff81116119b1576119a4836018611fe0600586901b1617611acf565b5061198183826001611ae7565b61ffff81116119dc576119cf836019611fe0600586901b1617611acf565b5061198183826002611ae7565b63ffffffff8111611a09576119fc83601a611fe0600586901b1617611acf565b5061198183826004611ae7565b67ffffffffffffffff81116114f457611a2d83601b611fe0600586901b1617611acf565b50611a3a83826008611ae7565b50505050565b611a48611ce3565b611a5a83846000015151848551611b00565b9392505050565b611a6c8260c3611acf565b506117fe82826000190360405160200180828152602001915050604051602081830303815290604052611bac565b611aa58260c2611acf565b506117fe828260405160200180828152602001915050604051602081830303815290604052611bac565b611ad7611ce3565b611a5a8384600001515184611bb9565b611aef611ce3565b610b15848560000151518585611c04565b611b08611ce3565b8251821115611b1657600080fd5b84602001518285011115611b4057611b4085611b388760200151878601611c62565b600202611c79565b600080865180518760208301019350808887011115611b5f5787860182525b505050602084015b60208410611b865780518252601f199093019260209182019101611b67565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6117998260028351611966565b611bc1611ce3565b83602001518310611bdd57611bdd848560200151600202611c79565b835180516020858301018481535080851415611bfa576001810182525b5093949350505050565b611c0c611ce3565b84602001518483011115611c2957611c2985858401600202611c79565b60006001836101000a039050855183868201018583198251161781525080518487011115611c575783860181525b509495945050505050565b600081831115611c73575081611960565b50919050565b8151611c858383611926565b50611a3a8382611a40565b5080546000825590600052602060002090810190610c809190611cfd565b6040805160a081018252600080825260208201819052918101829052606081019190915260808101611cde611ce3565b905290565b604051806040016040528060608152602001600081525090565b5b80821115611d125760008155600101611cfe565b509056fe5374616b696e6720616d6f756e74206d75737420626520686967686572207468616e2030756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261636c65536f75726365206d75737420626520746865206f7261636c65206f66207468652072657175657374a2646970667358221220dc55e344c9a8a47ad1494a4ceb9075d1355759ff58ee3399c7fada19b7f787eb64736f6c634300060c0033","deployedBytecode":"0x6080604052600436106101145760003560e01c80635f956d1a116100a0578063aa4dea0011610064578063aa4dea00146103d4578063bb4772e5146103fe578063c7bef65d14610413578063ed6c29aa14610428578063f4d638df1461043d57610114565b80635f956d1a146102b857806361598c711461036b5780638dc654a2146103955780638fc813c5146103aa578063944d7b55146103bf57610114565b80634357855e116100e75780634357855e146101f55780634819c6321461022557806352f1e5891461024f5780635b4b73a9146102645780635e1a6c171461028e57610114565b8063196a4b84146101195780633094cb741461015f5780633a4b66f1146101865780633bc5de3014610190575b600080fd5b34801561012557600080fd5b506101436004803603602081101561013c57600080fd5b5035610467565b604080516001600160a01b039092168252519081900360200190f35b34801561016b57600080fd5b5061017461048e565b60408051918252519081900360200190f35b61018e610494565b005b34801561019c57600080fd5b506101a56106ac565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101e15781810151838201526020016101c9565b505050509050019250505060405180910390f35b34801561020157600080fd5b5061018e6004803603604081101561021857600080fd5b508035906020013561070d565b34801561023157600080fd5b506101746004803603602081101561024857600080fd5b5035610810565b34801561025b57600080fd5b5061018e61082e565b34801561027057600080fd5b5061018e6004803603602081101561028757600080fd5b5035610933565b34801561029a57600080fd5b50610143600480360360208110156102b157600080fd5b5035610983565b3480156102c457600080fd5b50610174600480360360208110156102db57600080fd5b8101906020810181356401000000008111156102f657600080fd5b82018360208201111561030857600080fd5b8035906020019184600183028401116401000000008311171561032a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610990945050505050565b34801561037757600080fd5b506101436004803603602081101561038e57600080fd5b5035610b1d565b3480156103a157600080fd5b5061018e610b2a565b3480156103b657600080fd5b5061018e610c83565b3480156103cb57600080fd5b506101746110f0565b3480156103e057600080fd5b50610174600480360360208110156103f757600080fd5b50356110f6565b34801561040a57600080fd5b5061018e611103565b34801561041f57600080fd5b5061018e6112df565b34801561043457600080fd5b50610174611428565b34801561044957600080fd5b506101436004803603602081101561046057600080fd5b50356114a4565b600f818154811061047457fe5b6000918252602090912001546001600160a01b0316905081565b60105481565b600034116104d35760405162461bcd60e51b8152600401808060200182810382526024815260200180611d176024913960400191505060405180910390fd5b336000818152601360209081526040808320805460ff191660019081179091556009805491820181559093527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90920180546001600160a01b03191690931790925560155481516370a0823160e01b815230600482015291516001600160a01b0391909116926370a082319260248082019391829003018186803b15801561057a57600080fd5b505afa15801561058e573d6000803e3d6000fd5b505050506040513d60208110156105a457600080fd5b5051601055601454604080516358c22be760e01b815230600482015260006024820181905291516001600160a01b03909316926358c22be79234926044808201939182900301818588803b1580156105fb57600080fd5b505af115801561060f573d6000803e3d6000fd5b5050601054601554604080516370a0823160e01b815230600482015290519295506001600160a01b0390911693506370a082319250602480820192602092909190829003018186803b15801561066457600080fd5b505afa158015610678573d6000803e3d6000fd5b505050506040513d602081101561068e57600080fd5b50513360009081526011602052604090208054929091039091019055565b3360009081526012602090815260409182902080548351818402810184019094528084526060939283018282801561070357602002820191906000526020600020905b8154815260200190600101908083116106ef575b5050505050905090565b60008281526005602052604090205482906001600160a01b031633146107645760405162461bcd60e51b8152600401808060200182810382526028815260200180611d5e6028913960400191505060405180910390fd5b60008181526005602052604080822080546001600160a01b03191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a250600a805460018181019092557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80191909155600b8054918201815560009081527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db99091015550565b600b818154811061081d57fe5b600091825260209091200154905081565b600a54600d541461083e57600080fd5b60005b600d548110156109185760126000600d838154811061085c57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020600a80548390811061088e57fe5b60009182526020808320909101548354600181018555938352912090910155600a8054829081106108bb57fe5b9060005260206000200154600d82815481106108d357fe5b60009182526020822001546040516001600160a01b03909116917fcef9fc88e225fa1bbbecae68d6213c09e5033a0eeafe4afccd9709a9435c98fb91a3600101610841565b50610925600d6000611c90565b610931600a6000611c90565b565b3360008181526012602090815260408083208054600181018255908452918320909101849055518392917f10d7325afad389b2d1513a84eb27416d3f7cae3ddac7bc0cd24d7f4f1a00685191a350565b600d818154811061047457fe5b3360009081526013602052604081205460ff166109e3576040805162461bcd60e51b815260206004820152600c60248201526b2737ba10309039ba30b5b2b960a11b604482015290519081900360640190fd5b600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b03191633179055610a2d611cae565b600754610a4290306321abc2af60e11b6114b1565b60408051808201909152600381526219d95d60ea1b6020820152909150610a6b908290856114d6565b610ac8604051806040016040528060048152602001630e0c2e8d60e31b815250604051806040016040528060148152602001736c6973742e302e636f6d706f6e656e74732e636f60601b815250836114d69092919063ffffffff16565b60408051808201909152600581526474696d657360d81b6020820152670de0b6b3a764000090610afa908390836114f9565b600654600854610b15916001600160a01b0316908490611517565b949350505050565b6009818154811061047457fe5b6000610b346116e5565b9050806001600160a01b031663a9059cbb33836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b9357600080fd5b505afa158015610ba7573d6000803e3d6000fd5b505050506040513d6020811015610bbd57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b158015610c0e57600080fd5b505af1158015610c22573d6000803e3d6000fd5b505050506040513d6020811015610c3857600080fd5b5051610c80576040805162461bcd60e51b81526020600482015260126024820152712ab730b13632903a37903a3930b739b332b960711b604482015290519081900360640190fd5b50565b610c8b6116f4565b60005b600b54811015610de557600c54600b8281548110610ca857fe5b90600052602060002001541115610d0857600f60098281548110610cc857fe5b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b03909216919091179055610ddd565b600e60098281548110610d1757fe5b6000918252602080832090910154835460018101855593835290822090920180546001600160a01b0319166001600160a01b0390931692909217909155600e8054601192919084908110610d6757fe5b60009182526020808320909101546001600160a01b031683528281019390935260409182018120543082526011938490529181208054909201909155600e805491929183919085908110610db757fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020555b600101610c8e565b5060005b600f548110156110dd57600f543060009081526011602052604090205481610e0d57fe5b0460116000600f8481548110610e1f57fe5b60009182526020808320909101546001600160a01b03908116845283820194909452604092830182208054909501909455601554825163095ea7b360e01b815273f8ac10e65f2073460aad5f28e1eabe807dc287cf60048201526000196024820152925193169363095ea7b393604480850194929391928390030190829087803b158015610eac57600080fd5b505af1158015610ec0573d6000803e3d6000fd5b505050506040513d6020811015610ed657600080fd5b50506016546040805163095ea7b360e01b815273f8ac10e65f2073460aad5f28e1eabe807dc287cf6004820152600019602482015290516001600160a01b039092169163095ea7b3916044808201926020929091908290030181600087803b158015610f4157600080fd5b505af1158015610f55573d6000803e3d6000fd5b505050506040513d6020811015610f6b57600080fd5b5050601454600f80546001600160a01b03909216916336118b52916011916000919086908110610f9757fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902054600f805485908110610fca57fe5b6000918252602082200154604080516001600160e01b031960e087901b16815260048101949094526001600160a01b0390911660248401525160448084019382900301818387803b15801561101e57600080fd5b505af1158015611032573d6000803e3d6000fd5b505050507f695d9f48d38404ab4e67bdc812c4a80cba93ef87f7c4dd887537c418c5bf9a4a600f828154811061106457fe5b9060005260206000200160009054906101000a90046001600160a01b031660116000600f858154811061109357fe5b60009182526020808320909101546001600160a01b0390811684528382019490945260409283019091205482519490931684528301919091528051918290030190a1600101610de9565b5030600090815260116020526040812055565b600c5481565b600a818154811061081d57fe5b60005b600954811015610c805760005b601260006009848154811061112457fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020548110156112d6578061120f57601260006009848154811061116657fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902080548290811061119657fe5b9060005260206000200154600b83815481106111ae57fe5b90600052602060002001819055507fe87559bd68d91949aba8540903f38296d82d38ac0d9d687104cecd37448c8aaf600b83815481106111ea57fe5b90600052602060002001546040518082815260200191505060405180910390a16112ce565b601260006009848154811061122057fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902080548290811061125057fe5b9060005260206000200154600b838154811061126857fe5b90600052602060002001600082825403925050819055507fe87559bd68d91949aba8540903f38296d82d38ac0d9d687104cecd37448c8aaf600b83815481106112ad57fe5b90600052602060002001546040518082815260200191505060405180910390a15b600101611113565b50600101611106565b60098054600181810183557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af91820180546001600160a01b031990811673d8631e88f5a330faf7424def118a389e8405895c17909155835480830190945592909101805490921673497f35b5a2859343cdaa98aedb7605b2c46136d71790915560126020527fa63d50593a9f2d28784201546df2269b484f93965be799d7b91efe8b374b63aa8054808301825560647f6255b8012d5313325fa81cd2a413068816ad5d10d683a020e60dcfca85d972d79182018190558254808501909355603292909101919091557ffe8d6ea8e6ae634106c2dfe6253476c728fd6c8430fb19502e28853f0bda05bf805480840182557f4936ef248d4ca473a122a820ab669efcd6901bad2fd4a840dc188f3673ee29f890810192909255805492830181556000526050910155565b601554604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561147357600080fd5b505afa158015611487573d6000803e3d6000fd5b505050506040513d602081101561149d57600080fd5b5051905090565b600e818154811061047457fe5b6114b9611cae565b6114c1611cae565b6114cd8186868661174f565b95945050505050565b60808301516114e5908361178c565b60808301516114f4908261178c565b505050565b6080830151611508908361178c565b60808301516114f490826117a3565b6004546040805130606090811b60208084019190915260348084018690528451808503909101815260549093018452825192810192909220908601939093526000838152600590915281812080546001600160a01b0319166001600160a01b038816179055905182917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af991a26002546001600160a01b0316634000aea085846115bf87611802565b6040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611620578181015183820152602001611608565b50505050905090810190601f16801561164d5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561166e57600080fd5b505af1158015611682573d6000803e3d6000fd5b505050506040513d602081101561169857600080fd5b50516116d55760405162461bcd60e51b8152600401808060200182810382526023815260200180611d3b6023913960400191505060405180910390fd5b6004805460010190559392505050565b6002546001600160a01b031690565b60005b600b5461ffff8216101561173357600b8161ffff168154811061171657fe5b600091825260209091200154600c805490910190556001016116f7565b50600b54600c805460009083908161174757fe5b049091555050565b611757611cae565b6117678560800151610100611926565b50509183526001600160a01b031660208301526001600160e01b031916604082015290565b6117998260038351611966565b6114f48282611a40565b67ffffffffffffffff198112156117c3576117be8282611a61565b6117fe565b67ffffffffffffffff8113156117dd576117be8282611a9a565b600081126117f1576117be82600083611966565b6117fe8260018319611966565b5050565b6060634042994660e01b6000808460000151856020015186604001518760600151600189608001516000015160405160240180896001600160a01b03168152602001888152602001878152602001866001600160a01b03168152602001856001600160e01b031916815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156118b457818101518382015260200161189c565b50505050905090810190601f1680156118e15780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909d169c909c17909b5250989950505050505050505050919050565b61192e611ce3565b60208206156119435760208206602003820191505b506020808301829052604080518085526000815283019091019052815b92915050565b60178111611987576119818360e0600585901b168317611acf565b506114f4565b60ff81116119b1576119a4836018611fe0600586901b1617611acf565b5061198183826001611ae7565b61ffff81116119dc576119cf836019611fe0600586901b1617611acf565b5061198183826002611ae7565b63ffffffff8111611a09576119fc83601a611fe0600586901b1617611acf565b5061198183826004611ae7565b67ffffffffffffffff81116114f457611a2d83601b611fe0600586901b1617611acf565b50611a3a83826008611ae7565b50505050565b611a48611ce3565b611a5a83846000015151848551611b00565b9392505050565b611a6c8260c3611acf565b506117fe82826000190360405160200180828152602001915050604051602081830303815290604052611bac565b611aa58260c2611acf565b506117fe828260405160200180828152602001915050604051602081830303815290604052611bac565b611ad7611ce3565b611a5a8384600001515184611bb9565b611aef611ce3565b610b15848560000151518585611c04565b611b08611ce3565b8251821115611b1657600080fd5b84602001518285011115611b4057611b4085611b388760200151878601611c62565b600202611c79565b600080865180518760208301019350808887011115611b5f5787860182525b505050602084015b60208410611b865780518252601f199093019260209182019101611b67565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6117998260028351611966565b611bc1611ce3565b83602001518310611bdd57611bdd848560200151600202611c79565b835180516020858301018481535080851415611bfa576001810182525b5093949350505050565b611c0c611ce3565b84602001518483011115611c2957611c2985858401600202611c79565b60006001836101000a039050855183868201018583198251161781525080518487011115611c575783860181525b509495945050505050565b600081831115611c73575081611960565b50919050565b8151611c858383611926565b50611a3a8382611a40565b5080546000825590600052602060002090810190610c809190611cfd565b6040805160a081018252600080825260208201819052918101829052606081019190915260808101611cde611ce3565b905290565b604051806040016040528060608152602001600081525090565b5b80821115611d125760008155600101611cfe565b509056fe5374616b696e6720616d6f756e74206d75737420626520686967686572207468616e2030756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261636c65536f75726365206d75737420626520746865206f7261636c65206f66207468652072657175657374a2646970667358221220dc55e344c9a8a47ad1494a4ceb9075d1355759ff58ee3399c7fada19b7f787eb64736f6c634300060c0033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"ChainlinkCancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"ChainlinkFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"ChainlinkRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_relChange","type":"uint256"}],"name":"GetRelChange","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_winner","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"PayoutTo","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_requester","type":"address"},{"indexed":true,"internalType":"uint256","name":"_oracleData","type":"uint256"}],"name":"RequesterToData","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_requester","type":"address"},{"indexed":true,"internalType":"uint256","name":"_data","type":"uint256"}],"name":"SetData","type":"event"},{"inputs":[],"name":"aWethBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"averageRelGHGV","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_requestId","type":"bytes32"},{"internalType":"uint256","name":"_data","type":"uint256"}],"name":"fulfill","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getData","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRelChange","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"lastAWETHBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"oracleData","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"payOrGetPaid","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"penalized","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"prepareData","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"relativeGHG","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_API","type":"string"}],"name":"requestVolumeData","outputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"requesterToData","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"requesters","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"rewarded","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_data","type":"uint256"}],"name":"setData","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"stake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"stakerReg","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdrawLink","outputs":[],"stateMutability":"nonpayable","type":"function"}]}